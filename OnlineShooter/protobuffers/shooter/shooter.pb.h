// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shooter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_shooter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_shooter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_shooter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_shooter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shooter_2eproto;
namespace shooter {
class Entity;
struct EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class GameScene;
struct GameSceneDefaultTypeInternal;
extern GameSceneDefaultTypeInternal _GameScene_default_instance_;
class GetId;
struct GetIdDefaultTypeInternal;
extern GetIdDefaultTypeInternal _GetId_default_instance_;
class UserInput;
struct UserInputDefaultTypeInternal;
extern UserInputDefaultTypeInternal _UserInput_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class Vector4;
struct Vector4DefaultTypeInternal;
extern Vector4DefaultTypeInternal _Vector4_default_instance_;
}  // namespace shooter
PROTOBUF_NAMESPACE_OPEN
template<> ::shooter::Entity* Arena::CreateMaybeMessage<::shooter::Entity>(Arena*);
template<> ::shooter::GameScene* Arena::CreateMaybeMessage<::shooter::GameScene>(Arena*);
template<> ::shooter::GetId* Arena::CreateMaybeMessage<::shooter::GetId>(Arena*);
template<> ::shooter::UserInput* Arena::CreateMaybeMessage<::shooter::UserInput>(Arena*);
template<> ::shooter::Vector3* Arena::CreateMaybeMessage<::shooter::Vector3>(Arena*);
template<> ::shooter::Vector4* Arena::CreateMaybeMessage<::shooter::Vector4>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace shooter {

enum UserInput_InputType : int {
  UserInput_InputType_FORWARD = 0,
  UserInput_InputType_BACKWARD = 1,
  UserInput_InputType_TURN_LEFT = 2,
  UserInput_InputType_TURN_RIGHT = 3,
  UserInput_InputType_FIRE = 4
};
bool UserInput_InputType_IsValid(int value);
constexpr UserInput_InputType UserInput_InputType_InputType_MIN = UserInput_InputType_FORWARD;
constexpr UserInput_InputType UserInput_InputType_InputType_MAX = UserInput_InputType_FIRE;
constexpr int UserInput_InputType_InputType_ARRAYSIZE = UserInput_InputType_InputType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserInput_InputType_descriptor();
template<typename T>
inline const std::string& UserInput_InputType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserInput_InputType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserInput_InputType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserInput_InputType_descriptor(), enum_t_value);
}
inline bool UserInput_InputType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserInput_InputType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserInput_InputType>(
    UserInput_InputType_descriptor(), name, value);
}
enum Entity_StatetType : int {
  Entity_StatetType_NOT_ACTIVE = 0,
  Entity_StatetType_IS_ACTIVE = 1,
  Entity_StatetType_IS_CONNECTED = 2,
  Entity_StatetType_HAS_AMMO = 3,
  Entity_StatetType_IS_DEAD = 4
};
bool Entity_StatetType_IsValid(int value);
constexpr Entity_StatetType Entity_StatetType_StatetType_MIN = Entity_StatetType_NOT_ACTIVE;
constexpr Entity_StatetType Entity_StatetType_StatetType_MAX = Entity_StatetType_IS_DEAD;
constexpr int Entity_StatetType_StatetType_ARRAYSIZE = Entity_StatetType_StatetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Entity_StatetType_descriptor();
template<typename T>
inline const std::string& Entity_StatetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Entity_StatetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Entity_StatetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Entity_StatetType_descriptor(), enum_t_value);
}
inline bool Entity_StatetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Entity_StatetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Entity_StatetType>(
    Entity_StatetType_descriptor(), name, value);
}
// ===================================================================

class GetId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shooter.GetId) */ {
 public:
  inline GetId() : GetId(nullptr) {}
  ~GetId() override;
  explicit constexpr GetId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetId(const GetId& from);
  GetId(GetId&& from) noexcept
    : GetId() {
    *this = ::std::move(from);
  }

  inline GetId& operator=(const GetId& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetId& operator=(GetId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetId& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetId* internal_default_instance() {
    return reinterpret_cast<const GetId*>(
               &_GetId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetId& a, GetId& b) {
    a.Swap(&b);
  }
  inline void Swap(GetId* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetId* New() const final {
    return new GetId();
  }

  GetId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shooter.GetId";
  }
  protected:
  explicit GetId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // required int32 playerId = 1;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:shooter.GetId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  friend struct ::TableStruct_shooter_2eproto;
};
// -------------------------------------------------------------------

class UserInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shooter.UserInput) */ {
 public:
  inline UserInput() : UserInput(nullptr) {}
  ~UserInput() override;
  explicit constexpr UserInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInput(const UserInput& from);
  UserInput(UserInput&& from) noexcept
    : UserInput() {
    *this = ::std::move(from);
  }

  inline UserInput& operator=(const UserInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInput& operator=(UserInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInput* internal_default_instance() {
    return reinterpret_cast<const UserInput*>(
               &_UserInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserInput& a, UserInput& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInput* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInput* New() const final {
    return new UserInput();
  }

  UserInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shooter.UserInput";
  }
  protected:
  explicit UserInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserInput_InputType InputType;
  static constexpr InputType FORWARD =
    UserInput_InputType_FORWARD;
  static constexpr InputType BACKWARD =
    UserInput_InputType_BACKWARD;
  static constexpr InputType TURN_LEFT =
    UserInput_InputType_TURN_LEFT;
  static constexpr InputType TURN_RIGHT =
    UserInput_InputType_TURN_RIGHT;
  static constexpr InputType FIRE =
    UserInput_InputType_FIRE;
  static inline bool InputType_IsValid(int value) {
    return UserInput_InputType_IsValid(value);
  }
  static constexpr InputType InputType_MIN =
    UserInput_InputType_InputType_MIN;
  static constexpr InputType InputType_MAX =
    UserInput_InputType_InputType_MAX;
  static constexpr int InputType_ARRAYSIZE =
    UserInput_InputType_InputType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InputType_descriptor() {
    return UserInput_InputType_descriptor();
  }
  template<typename T>
  static inline const std::string& InputType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InputType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InputType_Name.");
    return UserInput_InputType_Name(enum_t_value);
  }
  static inline bool InputType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      InputType* value) {
    return UserInput_InputType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kInputFieldNumber = 3,
    kIsPressedFieldNumber = 4,
  };
  // required int32 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 playerId = 2;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .shooter.UserInput.InputType input = 3;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  ::shooter::UserInput_InputType input() const;
  void set_input(::shooter::UserInput_InputType value);
  private:
  ::shooter::UserInput_InputType _internal_input() const;
  void _internal_set_input(::shooter::UserInput_InputType value);
  public:

  // required bool isPressed = 4;
  bool has_ispressed() const;
  private:
  bool _internal_has_ispressed() const;
  public:
  void clear_ispressed();
  bool ispressed() const;
  void set_ispressed(bool value);
  private:
  bool _internal_ispressed() const;
  void _internal_set_ispressed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:shooter.UserInput)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  int input_;
  bool ispressed_;
  friend struct ::TableStruct_shooter_2eproto;
};
// -------------------------------------------------------------------

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shooter.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit constexpr Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return new Vector3();
  }

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vector3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shooter.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:shooter.Vector3)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_shooter_2eproto;
};
// -------------------------------------------------------------------

class Vector4 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shooter.Vector4) */ {
 public:
  inline Vector4() : Vector4(nullptr) {}
  ~Vector4() override;
  explicit constexpr Vector4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector4(const Vector4& from);
  Vector4(Vector4&& from) noexcept
    : Vector4() {
    *this = ::std::move(from);
  }

  inline Vector4& operator=(const Vector4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector4& operator=(Vector4&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector4* internal_default_instance() {
    return reinterpret_cast<const Vector4*>(
               &_Vector4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Vector4& a, Vector4& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector4* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector4* New() const final {
    return new Vector4();
  }

  Vector4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector4>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector4& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vector4& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shooter.Vector4";
  }
  protected:
  explicit Vector4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // required float w = 4;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:shooter.Vector4)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  float w_;
  friend struct ::TableStruct_shooter_2eproto;
};
// -------------------------------------------------------------------

class Entity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shooter.Entity) */ {
 public:
  inline Entity() : Entity(nullptr) {}
  ~Entity() override;
  explicit constexpr Entity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Entity(const Entity& from);
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entity& operator=(Entity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Entity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }
  inline void Swap(Entity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entity* New() const final {
    return new Entity();
  }

  Entity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Entity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Entity& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shooter.Entity";
  }
  protected:
  explicit Entity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Entity_StatetType StatetType;
  static constexpr StatetType NOT_ACTIVE =
    Entity_StatetType_NOT_ACTIVE;
  static constexpr StatetType IS_ACTIVE =
    Entity_StatetType_IS_ACTIVE;
  static constexpr StatetType IS_CONNECTED =
    Entity_StatetType_IS_CONNECTED;
  static constexpr StatetType HAS_AMMO =
    Entity_StatetType_HAS_AMMO;
  static constexpr StatetType IS_DEAD =
    Entity_StatetType_IS_DEAD;
  static inline bool StatetType_IsValid(int value) {
    return Entity_StatetType_IsValid(value);
  }
  static constexpr StatetType StatetType_MIN =
    Entity_StatetType_StatetType_MIN;
  static constexpr StatetType StatetType_MAX =
    Entity_StatetType_StatetType_MAX;
  static constexpr int StatetType_ARRAYSIZE =
    Entity_StatetType_StatetType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StatetType_descriptor() {
    return Entity_StatetType_descriptor();
  }
  template<typename T>
  static inline const std::string& StatetType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StatetType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StatetType_Name.");
    return Entity_StatetType_Name(enum_t_value);
  }
  static inline bool StatetType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StatetType* value) {
    return Entity_StatetType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 4,
    kVelocityFieldNumber = 5,
    kOrientationFieldNumber = 6,
    kEntityIdFieldNumber = 1,
    kRequestIdFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // required .shooter.Vector3 position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::shooter::Vector3& position() const;
  PROTOBUF_MUST_USE_RESULT ::shooter::Vector3* release_position();
  ::shooter::Vector3* mutable_position();
  void set_allocated_position(::shooter::Vector3* position);
  private:
  const ::shooter::Vector3& _internal_position() const;
  ::shooter::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::shooter::Vector3* position);
  ::shooter::Vector3* unsafe_arena_release_position();

  // required .shooter.Vector3 velocity = 5;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::shooter::Vector3& velocity() const;
  PROTOBUF_MUST_USE_RESULT ::shooter::Vector3* release_velocity();
  ::shooter::Vector3* mutable_velocity();
  void set_allocated_velocity(::shooter::Vector3* velocity);
  private:
  const ::shooter::Vector3& _internal_velocity() const;
  ::shooter::Vector3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::shooter::Vector3* velocity);
  ::shooter::Vector3* unsafe_arena_release_velocity();

  // required .shooter.Vector4 orientation = 6;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::shooter::Vector4& orientation() const;
  PROTOBUF_MUST_USE_RESULT ::shooter::Vector4* release_orientation();
  ::shooter::Vector4* mutable_orientation();
  void set_allocated_orientation(::shooter::Vector4* orientation);
  private:
  const ::shooter::Vector4& _internal_orientation() const;
  ::shooter::Vector4* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::shooter::Vector4* orientation);
  ::shooter::Vector4* unsafe_arena_release_orientation();

  // required int32 entityId = 1;
  bool has_entityid() const;
  private:
  bool _internal_has_entityid() const;
  public:
  void clear_entityid();
  ::PROTOBUF_NAMESPACE_ID::int32 entityid() const;
  void set_entityid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_entityid() const;
  void _internal_set_entityid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 requestId = 2;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .shooter.Entity.StatetType state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::shooter::Entity_StatetType state() const;
  void set_state(::shooter::Entity_StatetType value);
  private:
  ::shooter::Entity_StatetType _internal_state() const;
  void _internal_set_state(::shooter::Entity_StatetType value);
  public:

  // @@protoc_insertion_point(class_scope:shooter.Entity)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::shooter::Vector3* position_;
  ::shooter::Vector3* velocity_;
  ::shooter::Vector4* orientation_;
  ::PROTOBUF_NAMESPACE_ID::int32 entityid_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  int state_;
  friend struct ::TableStruct_shooter_2eproto;
};
// -------------------------------------------------------------------

class GameScene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shooter.GameScene) */ {
 public:
  inline GameScene() : GameScene(nullptr) {}
  ~GameScene() override;
  explicit constexpr GameScene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameScene(const GameScene& from);
  GameScene(GameScene&& from) noexcept
    : GameScene() {
    *this = ::std::move(from);
  }

  inline GameScene& operator=(const GameScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameScene& operator=(GameScene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameScene& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameScene* internal_default_instance() {
    return reinterpret_cast<const GameScene*>(
               &_GameScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GameScene& a, GameScene& b) {
    a.Swap(&b);
  }
  inline void Swap(GameScene* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameScene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameScene* New() const final {
    return new GameScene();
  }

  GameScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameScene>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameScene& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameScene& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameScene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shooter.GameScene";
  }
  protected:
  explicit GameScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 1,
  };
  // repeated .shooter.Entity entities = 1;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::shooter::Entity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shooter::Entity >*
      mutable_entities();
  private:
  const ::shooter::Entity& _internal_entities(int index) const;
  ::shooter::Entity* _internal_add_entities();
  public:
  const ::shooter::Entity& entities(int index) const;
  ::shooter::Entity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shooter::Entity >&
      entities() const;

  // @@protoc_insertion_point(class_scope:shooter.GameScene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shooter::Entity > entities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shooter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetId

// required int32 playerId = 1;
inline bool GetId::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetId::has_playerid() const {
  return _internal_has_playerid();
}
inline void GetId::clear_playerid() {
  playerid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetId::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetId::playerid() const {
  // @@protoc_insertion_point(field_get:shooter.GetId.playerId)
  return _internal_playerid();
}
inline void GetId::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  playerid_ = value;
}
inline void GetId::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:shooter.GetId.playerId)
}

// -------------------------------------------------------------------

// UserInput

// required int32 requestId = 1;
inline bool UserInput::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserInput::has_requestid() const {
  return _internal_has_requestid();
}
inline void UserInput::clear_requestid() {
  requestid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInput::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInput::requestid() const {
  // @@protoc_insertion_point(field_get:shooter.UserInput.requestId)
  return _internal_requestid();
}
inline void UserInput::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  requestid_ = value;
}
inline void UserInput::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:shooter.UserInput.requestId)
}

// required int32 playerId = 2;
inline bool UserInput::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserInput::has_playerid() const {
  return _internal_has_playerid();
}
inline void UserInput::clear_playerid() {
  playerid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInput::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInput::playerid() const {
  // @@protoc_insertion_point(field_get:shooter.UserInput.playerId)
  return _internal_playerid();
}
inline void UserInput::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_ = value;
}
inline void UserInput::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:shooter.UserInput.playerId)
}

// required .shooter.UserInput.InputType input = 3;
inline bool UserInput::_internal_has_input() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserInput::has_input() const {
  return _internal_has_input();
}
inline void UserInput::clear_input() {
  input_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::shooter::UserInput_InputType UserInput::_internal_input() const {
  return static_cast< ::shooter::UserInput_InputType >(input_);
}
inline ::shooter::UserInput_InputType UserInput::input() const {
  // @@protoc_insertion_point(field_get:shooter.UserInput.input)
  return _internal_input();
}
inline void UserInput::_internal_set_input(::shooter::UserInput_InputType value) {
  assert(::shooter::UserInput_InputType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  input_ = value;
}
inline void UserInput::set_input(::shooter::UserInput_InputType value) {
  _internal_set_input(value);
  // @@protoc_insertion_point(field_set:shooter.UserInput.input)
}

// required bool isPressed = 4;
inline bool UserInput::_internal_has_ispressed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UserInput::has_ispressed() const {
  return _internal_has_ispressed();
}
inline void UserInput::clear_ispressed() {
  ispressed_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool UserInput::_internal_ispressed() const {
  return ispressed_;
}
inline bool UserInput::ispressed() const {
  // @@protoc_insertion_point(field_get:shooter.UserInput.isPressed)
  return _internal_ispressed();
}
inline void UserInput::_internal_set_ispressed(bool value) {
  _has_bits_[0] |= 0x00000008u;
  ispressed_ = value;
}
inline void UserInput::set_ispressed(bool value) {
  _internal_set_ispressed(value);
  // @@protoc_insertion_point(field_set:shooter.UserInput.isPressed)
}

// -------------------------------------------------------------------

// Vector3

// required float x = 1;
inline bool Vector3::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vector3::has_x() const {
  return _internal_has_x();
}
inline void Vector3::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Vector3::_internal_x() const {
  return x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:shooter.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:shooter.Vector3.x)
}

// required float y = 2;
inline bool Vector3::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vector3::has_y() const {
  return _internal_has_y();
}
inline void Vector3::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Vector3::_internal_y() const {
  return y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:shooter.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:shooter.Vector3.y)
}

// required float z = 3;
inline bool Vector3::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vector3::has_z() const {
  return _internal_has_z();
}
inline void Vector3::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Vector3::_internal_z() const {
  return z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:shooter.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:shooter.Vector3.z)
}

// -------------------------------------------------------------------

// Vector4

// required float x = 1;
inline bool Vector4::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vector4::has_x() const {
  return _internal_has_x();
}
inline void Vector4::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Vector4::_internal_x() const {
  return x_;
}
inline float Vector4::x() const {
  // @@protoc_insertion_point(field_get:shooter.Vector4.x)
  return _internal_x();
}
inline void Vector4::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Vector4::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:shooter.Vector4.x)
}

// required float y = 2;
inline bool Vector4::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vector4::has_y() const {
  return _internal_has_y();
}
inline void Vector4::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Vector4::_internal_y() const {
  return y_;
}
inline float Vector4::y() const {
  // @@protoc_insertion_point(field_get:shooter.Vector4.y)
  return _internal_y();
}
inline void Vector4::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Vector4::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:shooter.Vector4.y)
}

// required float z = 3;
inline bool Vector4::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vector4::has_z() const {
  return _internal_has_z();
}
inline void Vector4::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Vector4::_internal_z() const {
  return z_;
}
inline float Vector4::z() const {
  // @@protoc_insertion_point(field_get:shooter.Vector4.z)
  return _internal_z();
}
inline void Vector4::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Vector4::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:shooter.Vector4.z)
}

// required float w = 4;
inline bool Vector4::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vector4::has_w() const {
  return _internal_has_w();
}
inline void Vector4::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Vector4::_internal_w() const {
  return w_;
}
inline float Vector4::w() const {
  // @@protoc_insertion_point(field_get:shooter.Vector4.w)
  return _internal_w();
}
inline void Vector4::_internal_set_w(float value) {
  _has_bits_[0] |= 0x00000008u;
  w_ = value;
}
inline void Vector4::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:shooter.Vector4.w)
}

// -------------------------------------------------------------------

// Entity

// required int32 entityId = 1;
inline bool Entity::_internal_has_entityid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Entity::has_entityid() const {
  return _internal_has_entityid();
}
inline void Entity::clear_entityid() {
  entityid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Entity::_internal_entityid() const {
  return entityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Entity::entityid() const {
  // @@protoc_insertion_point(field_get:shooter.Entity.entityId)
  return _internal_entityid();
}
inline void Entity::_internal_set_entityid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  entityid_ = value;
}
inline void Entity::set_entityid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:shooter.Entity.entityId)
}

// required int32 requestId = 2;
inline bool Entity::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Entity::has_requestid() const {
  return _internal_has_requestid();
}
inline void Entity::clear_requestid() {
  requestid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Entity::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Entity::requestid() const {
  // @@protoc_insertion_point(field_get:shooter.Entity.requestId)
  return _internal_requestid();
}
inline void Entity::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  requestid_ = value;
}
inline void Entity::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:shooter.Entity.requestId)
}

// required .shooter.Entity.StatetType state = 3;
inline bool Entity::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Entity::has_state() const {
  return _internal_has_state();
}
inline void Entity::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::shooter::Entity_StatetType Entity::_internal_state() const {
  return static_cast< ::shooter::Entity_StatetType >(state_);
}
inline ::shooter::Entity_StatetType Entity::state() const {
  // @@protoc_insertion_point(field_get:shooter.Entity.state)
  return _internal_state();
}
inline void Entity::_internal_set_state(::shooter::Entity_StatetType value) {
  assert(::shooter::Entity_StatetType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  state_ = value;
}
inline void Entity::set_state(::shooter::Entity_StatetType value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:shooter.Entity.state)
}

// required .shooter.Vector3 position = 4;
inline bool Entity::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool Entity::has_position() const {
  return _internal_has_position();
}
inline void Entity::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::shooter::Vector3& Entity::_internal_position() const {
  const ::shooter::Vector3* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::shooter::Vector3&>(
      ::shooter::_Vector3_default_instance_);
}
inline const ::shooter::Vector3& Entity::position() const {
  // @@protoc_insertion_point(field_get:shooter.Entity.position)
  return _internal_position();
}
inline void Entity::unsafe_arena_set_allocated_position(
    ::shooter::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:shooter.Entity.position)
}
inline ::shooter::Vector3* Entity::release_position() {
  _has_bits_[0] &= ~0x00000001u;
  ::shooter::Vector3* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::shooter::Vector3* Entity::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:shooter.Entity.position)
  _has_bits_[0] &= ~0x00000001u;
  ::shooter::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::shooter::Vector3* Entity::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::shooter::Vector3>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::shooter::Vector3* Entity::mutable_position() {
  ::shooter::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:shooter.Entity.position)
  return _msg;
}
inline void Entity::set_allocated_position(::shooter::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::shooter::Vector3>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:shooter.Entity.position)
}

// required .shooter.Vector3 velocity = 5;
inline bool Entity::_internal_has_velocity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || velocity_ != nullptr);
  return value;
}
inline bool Entity::has_velocity() const {
  return _internal_has_velocity();
}
inline void Entity::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::shooter::Vector3& Entity::_internal_velocity() const {
  const ::shooter::Vector3* p = velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::shooter::Vector3&>(
      ::shooter::_Vector3_default_instance_);
}
inline const ::shooter::Vector3& Entity::velocity() const {
  // @@protoc_insertion_point(field_get:shooter.Entity.velocity)
  return _internal_velocity();
}
inline void Entity::unsafe_arena_set_allocated_velocity(
    ::shooter::Vector3* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:shooter.Entity.velocity)
}
inline ::shooter::Vector3* Entity::release_velocity() {
  _has_bits_[0] &= ~0x00000002u;
  ::shooter::Vector3* temp = velocity_;
  velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::shooter::Vector3* Entity::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:shooter.Entity.velocity)
  _has_bits_[0] &= ~0x00000002u;
  ::shooter::Vector3* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::shooter::Vector3* Entity::_internal_mutable_velocity() {
  _has_bits_[0] |= 0x00000002u;
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::shooter::Vector3>(GetArenaForAllocation());
    velocity_ = p;
  }
  return velocity_;
}
inline ::shooter::Vector3* Entity::mutable_velocity() {
  ::shooter::Vector3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:shooter.Entity.velocity)
  return _msg;
}
inline void Entity::set_allocated_velocity(::shooter::Vector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::shooter::Vector3>::GetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:shooter.Entity.velocity)
}

// required .shooter.Vector4 orientation = 6;
inline bool Entity::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || orientation_ != nullptr);
  return value;
}
inline bool Entity::has_orientation() const {
  return _internal_has_orientation();
}
inline void Entity::clear_orientation() {
  if (orientation_ != nullptr) orientation_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::shooter::Vector4& Entity::_internal_orientation() const {
  const ::shooter::Vector4* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::shooter::Vector4&>(
      ::shooter::_Vector4_default_instance_);
}
inline const ::shooter::Vector4& Entity::orientation() const {
  // @@protoc_insertion_point(field_get:shooter.Entity.orientation)
  return _internal_orientation();
}
inline void Entity::unsafe_arena_set_allocated_orientation(
    ::shooter::Vector4* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:shooter.Entity.orientation)
}
inline ::shooter::Vector4* Entity::release_orientation() {
  _has_bits_[0] &= ~0x00000004u;
  ::shooter::Vector4* temp = orientation_;
  orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::shooter::Vector4* Entity::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:shooter.Entity.orientation)
  _has_bits_[0] &= ~0x00000004u;
  ::shooter::Vector4* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::shooter::Vector4* Entity::_internal_mutable_orientation() {
  _has_bits_[0] |= 0x00000004u;
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::shooter::Vector4>(GetArenaForAllocation());
    orientation_ = p;
  }
  return orientation_;
}
inline ::shooter::Vector4* Entity::mutable_orientation() {
  ::shooter::Vector4* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:shooter.Entity.orientation)
  return _msg;
}
inline void Entity::set_allocated_orientation(::shooter::Vector4* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::shooter::Vector4>::GetOwningArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:shooter.Entity.orientation)
}

// -------------------------------------------------------------------

// GameScene

// repeated .shooter.Entity entities = 1;
inline int GameScene::_internal_entities_size() const {
  return entities_.size();
}
inline int GameScene::entities_size() const {
  return _internal_entities_size();
}
inline void GameScene::clear_entities() {
  entities_.Clear();
}
inline ::shooter::Entity* GameScene::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:shooter.GameScene.entities)
  return entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shooter::Entity >*
GameScene::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:shooter.GameScene.entities)
  return &entities_;
}
inline const ::shooter::Entity& GameScene::_internal_entities(int index) const {
  return entities_.Get(index);
}
inline const ::shooter::Entity& GameScene::entities(int index) const {
  // @@protoc_insertion_point(field_get:shooter.GameScene.entities)
  return _internal_entities(index);
}
inline ::shooter::Entity* GameScene::_internal_add_entities() {
  return entities_.Add();
}
inline ::shooter::Entity* GameScene::add_entities() {
  ::shooter::Entity* _add = _internal_add_entities();
  // @@protoc_insertion_point(field_add:shooter.GameScene.entities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shooter::Entity >&
GameScene::entities() const {
  // @@protoc_insertion_point(field_list:shooter.GameScene.entities)
  return entities_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace shooter

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::shooter::UserInput_InputType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::shooter::UserInput_InputType>() {
  return ::shooter::UserInput_InputType_descriptor();
}
template <> struct is_proto_enum< ::shooter::Entity_StatetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::shooter::Entity_StatetType>() {
  return ::shooter::Entity_StatetType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_shooter_2eproto
